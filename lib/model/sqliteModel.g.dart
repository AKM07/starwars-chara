// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'sqliteModel.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Account.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Account TABLE
class TableAccount extends SqfEntityTableBase {
  TableAccount() {
    // declare properties of EntityTable
    tableName = 'account';
    primaryKeyName = '';
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('id', DbType.text, isPrimaryKeyField: true),
      SqfEntityFieldBase('email', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('name', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('photoUrl', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableAccount();
  }
}

// People TABLE
class TablePeople extends SqfEntityTableBase {
  TablePeople() {
    // declare properties of EntityTable
    tableName = 'people';
    primaryKeyName = '';
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isPrimaryKeyField: true),
      SqfEntityFieldBase('height', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('mass', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('hairColor', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('skinColor', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('eyeColor', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('birthYear', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('gender', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('created', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
      SqfEntityFieldBase('edited', DbType.text,
          isUnique: false, isNotNull: false, isIndex: false),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TablePeople();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class StarwarsDBModel extends SqfEntityModelProvider {
  StarwarsDBModel() {
    databaseName = dbModel.databaseName;
    password = dbModel.password;
    dbVersion = dbModel.dbVersion;
    databaseTables = [
      TableAccount.getInstance,
      TablePeople.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = dbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Account
class Account {
  Account({this.id, this.email, this.name, this.photoUrl}) {
    _setDefaultValues();
  }
  Account.withFields(this.email, this.name, this.photoUrl) {
    _setDefaultValues();
  }
  Account.withId(this.id, this.email, this.name, this.photoUrl) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Account.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    if (o['id'] != null) {
      id = o['id'].toString();
    }
    if (o['email'] != null) {
      email = o['email'].toString();
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['photoUrl'] != null) {
      photoUrl = o['photoUrl'].toString();
    }

    isSaved = true;
  }
  // FIELDS (Account)
  String? id;
  String? email;
  String? name;
  String? photoUrl;
  bool? isSaved;
  BoolResult? saveResult;
  // end FIELDS (Account)

  static const bool _softDeleteActivated = false;
  AccountManager? __mnAccount;

  AccountManager get _mnAccount {
    return __mnAccount = __mnAccount ?? AccountManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }

    if (email != null) {
      map['email'] = email;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (photoUrl != null) {
      map['photoUrl'] = photoUrl;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }

    if (email != null) {
      map['email'] = email;
    }

    if (name != null) {
      map['name'] = name;
    }

    if (photoUrl != null) {
      map['photoUrl'] = photoUrl;
    }

    return map;
  }

  /// This method returns Json String [Account]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Account]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [email, name, photoUrl];
  }

  List<dynamic> toArgsWithIds() {
    return [id, email, name, photoUrl];
  }

  static Future<List<Account>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Account.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Account>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Account>[];
    try {
      objList = list
          .map((account) => Account.fromMap(account as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Account.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Account>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Account> objList = <Account>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Account.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Account by ID if exist, otherwise returns null
  ///
  /// Primary Keys: String? id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Account if exist, otherwise returns null
  Future<Account?> getById(String? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Account? obj;
    final data = await _mnAccount.getById([id]);
    if (data.length != 0) {
      obj = Account.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Account) object. If the Primary Key (id) field is null, returns Error.
  ///
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  ///
  /// Call the saveAs() method if you do not want to save it when there is another row with the same id

  /// <returns>Returns BoolResult
  Future<BoolResult> save() async {
    final result = BoolResult(success: false);
    try {
      await _mnAccount.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO account (id, email, name, photoUrl)  VALUES (?,?,?,?)',
          toArgsWithIds());
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<Account> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Account> accounts) async {
    // final results = _mnAccount.saveAll('INSERT OR REPLACE INTO account (id, email, name, photoUrl)  VALUES (?,?,?,?)',accounts);
    // return results; removed in sqfentity_gen 1.3.0+6
    await StarwarsDBModel().batchStart();
    for (final obj in accounts) {
      await obj.save();
    }
    //    return StarwarsDBModel().batchCommit();
    final result = await StarwarsDBModel().batchCommit();
    for (int i = 0; i < accounts.length; i++) {
      if (accounts[i].id == null) {
        accounts[i].id = result![i] as String;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id

  Future<int?> upsert() async {
    try {
      final result = await _mnAccount.rawInsert(
          'INSERT OR REPLACE INTO account (id, email, name, photoUrl)  VALUES (?,?,?,?)',
          [id, email, name, photoUrl]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Account id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Account id=$id did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Account Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Account>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Account> accounts) async {
    final results = await _mnAccount.rawInsertAll(
        'INSERT OR REPLACE INTO account (id, email, name, photoUrl)  VALUES (?,?,?,?)',
        accounts);
    return results;
  }

  /// Deletes Account

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Account invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnAccount
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnAccount.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  AccountFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AccountFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  AccountFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return AccountFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion account

// region AccountField
class AccountField extends SearchCriteria {
  AccountField(this.accountFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  AccountFilterBuilder accountFB;

  AccountField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  AccountFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    accountFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accountFB.parameters, param, SqlSyntax.EQuals,
            accountFB._addedBlocks)
        : setCriteria(pValue, accountFB.parameters, param, SqlSyntax.NotEQuals,
            accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    accountFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.EQualsOrNull, accountFB._addedBlocks)
        : setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder isNull() {
    accountFB._addedBlocks = setCriteria(
        0,
        accountFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      accountFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          accountFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          accountFB._addedBlocks);
      _waitingNot = '';
      accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
          accountFB._addedBlocks.retVal;
    }
    return accountFB;
  }

  AccountFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      accountFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          accountFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          accountFB._addedBlocks);
      _waitingNot = '';
      accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
          accountFB._addedBlocks.retVal;
      accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
          accountFB._addedBlocks.retVal;
    }
    return accountFB;
  }

  AccountFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      accountFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          accountFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          accountFB._addedBlocks);
      _waitingNot = '';
      accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
          accountFB._addedBlocks.retVal;
    }
    return accountFB;
  }

  AccountFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      accountFB._addedBlocks = setCriteria(
          pFirst,
          accountFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          accountFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        accountFB._addedBlocks = setCriteria(pFirst, accountFB.parameters,
            param, SqlSyntax.LessThan, accountFB._addedBlocks);
      } else {
        accountFB._addedBlocks = setCriteria(pFirst, accountFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, accountFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        accountFB._addedBlocks = setCriteria(pLast, accountFB.parameters, param,
            SqlSyntax.GreaterThan, accountFB._addedBlocks);
      } else {
        accountFB._addedBlocks = setCriteria(pLast, accountFB.parameters, param,
            SqlSyntax.LessThanOrEquals, accountFB._addedBlocks);
      }
    }
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    accountFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.GreaterThan, accountFB._addedBlocks)
        : setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.LessThanOrEquals, accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    accountFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accountFB.parameters, param, SqlSyntax.LessThan,
            accountFB._addedBlocks)
        : setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    accountFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, accountFB._addedBlocks)
        : setCriteria(pValue, accountFB.parameters, param, SqlSyntax.LessThan,
            accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    accountFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.LessThanOrEquals, accountFB._addedBlocks)
        : setCriteria(pValue, accountFB.parameters, param,
            SqlSyntax.GreaterThan, accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }

  AccountFilterBuilder inValues(dynamic pValue) {
    accountFB._addedBlocks = setCriteria(
        pValue,
        accountFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        accountFB._addedBlocks);
    _waitingNot = '';
    accountFB._addedBlocks.needEndBlock![accountFB._blockIndex] =
        accountFB._addedBlocks.retVal;
    return accountFB;
  }
}
// endregion AccountField

// region AccountFilterBuilder
class AccountFilterBuilder extends SearchCriteria {
  AccountFilterBuilder(Account obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  Account? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  AccountFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  AccountFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  AccountFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  AccountFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  AccountFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  AccountFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  AccountFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  AccountFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  AccountFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  AccountFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  AccountFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  AccountField setField(AccountField? field, String colName, DbType dbtype) {
    return AccountField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  AccountField? _id;
  AccountField get id {
    return _id = setField(_id, 'id', DbType.text);
  }

  AccountField? _email;
  AccountField get email {
    return _email = setField(_email, 'email', DbType.text);
  }

  AccountField? _name;
  AccountField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  AccountField? _photoUrl;
  AccountField get photoUrl {
    return _photoUrl = setField(_photoUrl, 'photoUrl', DbType.text);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Account._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Account> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (Account._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnAccount.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnAccount.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from account ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnAccount.updateBatch(qparams, values);
  }

  /// This method always returns Account Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Account>
  Future<Account?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnAccount.toList(qparams);
    final data = await objFuture;
    Account? obj;
    if (data.isNotEmpty) {
      obj = Account.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Account]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? accountCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final accountsFuture = await _obj!._mnAccount.toList(qparams);
    final int count = accountsFuture[0]['CNT'] as int;
    if (accountCount != null) {
      accountCount(count);
    }
    return count;
  }

  /// This method returns List<Account> [Account]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Account>
  Future<List<Account>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Account> accountsData = await Account.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return accountsData;
  }

  /// This method returns Json String [Account]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Account]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Account]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnAccount.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Account]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM account WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  Future<List<String>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<String> idData = <String>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj!._mnAccount.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as String);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Account]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnAccount.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Account.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnAccount.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion AccountFilterBuilder

// region AccountFields
class AccountFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.text);
  }

  static TableField? _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fPhotoUrl;
  static TableField get photoUrl {
    return _fPhotoUrl =
        _fPhotoUrl ?? SqlSyntax.setField(_fPhotoUrl, 'photoUrl', DbType.text);
  }
}
// endregion AccountFields

//region AccountManager
class AccountManager extends SqfEntityProvider {
  AccountManager()
      : super(StarwarsDBModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'account';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion AccountManager
// region People
class People {
  People(
      {this.name,
      this.height,
      this.mass,
      this.hairColor,
      this.skinColor,
      this.eyeColor,
      this.birthYear,
      this.gender,
      this.created,
      this.edited}) {
    _setDefaultValues();
  }
  People.withFields(this.height, this.mass, this.hairColor, this.skinColor,
      this.eyeColor, this.birthYear, this.gender, this.created, this.edited) {
    _setDefaultValues();
  }
  People.withId(
      this.name,
      this.height,
      this.mass,
      this.hairColor,
      this.skinColor,
      this.eyeColor,
      this.birthYear,
      this.gender,
      this.created,
      this.edited) {
    _setDefaultValues();
  }
  // fromMap v2.0
  People.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['height'] != null) {
      height = o['height'].toString();
    }
    if (o['mass'] != null) {
      mass = o['mass'].toString();
    }
    if (o['hairColor'] != null) {
      hairColor = o['hairColor'].toString();
    }
    if (o['skinColor'] != null) {
      skinColor = o['skinColor'].toString();
    }
    if (o['eyeColor'] != null) {
      eyeColor = o['eyeColor'].toString();
    }
    if (o['birthYear'] != null) {
      birthYear = o['birthYear'].toString();
    }
    if (o['gender'] != null) {
      gender = o['gender'].toString();
    }
    if (o['created'] != null) {
      created = o['created'].toString();
    }
    if (o['edited'] != null) {
      edited = o['edited'].toString();
    }

    isSaved = true;
  }
  // FIELDS (People)
  String? name;
  String? height;
  String? mass;
  String? hairColor;
  String? skinColor;
  String? eyeColor;
  String? birthYear;
  String? gender;
  String? created;
  String? edited;
  bool? isSaved;
  BoolResult? saveResult;
  // end FIELDS (People)

  static const bool _softDeleteActivated = false;
  PeopleManager? __mnPeople;

  PeopleManager get _mnPeople {
    return __mnPeople = __mnPeople ?? PeopleManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (name != null) {
      map['name'] = name;
    }

    if (height != null) {
      map['height'] = height;
    }

    if (mass != null) {
      map['mass'] = mass;
    }

    if (hairColor != null) {
      map['hairColor'] = hairColor;
    }

    if (skinColor != null) {
      map['skinColor'] = skinColor;
    }

    if (eyeColor != null) {
      map['eyeColor'] = eyeColor;
    }

    if (birthYear != null) {
      map['birthYear'] = birthYear;
    }

    if (gender != null) {
      map['gender'] = gender;
    }

    if (created != null) {
      map['created'] = created;
    }

    if (edited != null) {
      map['edited'] = edited;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (name != null) {
      map['name'] = name;
    }

    if (height != null) {
      map['height'] = height;
    }

    if (mass != null) {
      map['mass'] = mass;
    }

    if (hairColor != null) {
      map['hairColor'] = hairColor;
    }

    if (skinColor != null) {
      map['skinColor'] = skinColor;
    }

    if (eyeColor != null) {
      map['eyeColor'] = eyeColor;
    }

    if (birthYear != null) {
      map['birthYear'] = birthYear;
    }

    if (gender != null) {
      map['gender'] = gender;
    }

    if (created != null) {
      map['created'] = created;
    }

    if (edited != null) {
      map['edited'] = edited;
    }

    return map;
  }

  /// This method returns Json String [People]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [People]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      height,
      mass,
      hairColor,
      skinColor,
      eyeColor,
      birthYear,
      gender,
      created,
      edited
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      name,
      height,
      mass,
      hairColor,
      skinColor,
      eyeColor,
      birthYear,
      gender,
      created,
      edited
    ];
  }

  static Future<List<People>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR People.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<People>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <People>[];
    try {
      objList = list
          .map((people) => People.fromMap(people as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR People.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<People>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<People> objList = <People>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = People.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns People by ID if exist, otherwise returns null
  ///
  /// Primary Keys: String? name
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns People if exist, otherwise returns null
  Future<People?> getById(String? name,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (name == null) {
      return null;
    }
    People? obj;
    final data = await _mnPeople.getById([name]);
    if (data.length != 0) {
      obj = People.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (People) object. If the Primary Key (name) field is null, returns Error.
  ///
  /// INSERTS (If not exist) OR REPLACES (If exist) data while Primary Key is not null.
  ///
  /// Call the saveAs() method if you do not want to save it when there is another row with the same name

  /// <returns>Returns BoolResult
  Future<BoolResult> save() async {
    final result = BoolResult(success: false);
    try {
      await _mnPeople.rawInsert(
          'INSERT ${isSaved! ? 'OR REPLACE' : ''} INTO people (name, height, mass, hairColor, skinColor, eyeColor, birthYear, gender, created, edited)  VALUES (?,?,?,?,?,?,?,?,?,?)',
          toArgsWithIds());
      result.success = true;
      isSaved = true;
    } catch (e) {
      result.errorMessage = e.toString();
    }

    saveResult = result;
    return result;
  }

  /// saveAll method saves the sent List<People> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<People> peoples) async {
    // final results = _mnPeople.saveAll('INSERT OR REPLACE INTO people (name, height, mass, hairColor, skinColor, eyeColor, birthYear, gender, created, edited)  VALUES (?,?,?,?,?,?,?,?,?,?)',peoples);
    // return results; removed in sqfentity_gen 1.3.0+6
    await StarwarsDBModel().batchStart();
    for (final obj in peoples) {
      await obj.save();
    }
    //    return StarwarsDBModel().batchCommit();
    final result = await StarwarsDBModel().batchCommit();
    for (int i = 0; i < peoples.length; i++) {
      if (peoples[i].name == null) {
        peoples[i].name = result![i] as String;
      }
    }

    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns name

  Future<int?> upsert() async {
    try {
      final result = await _mnPeople.rawInsert(
          'INSERT OR REPLACE INTO people (name, height, mass, hairColor, skinColor, eyeColor, birthYear, gender, created, edited)  VALUES (?,?,?,?,?,?,?,?,?,?)',
          [
            name,
            height,
            mass,
            hairColor,
            skinColor,
            eyeColor,
            birthYear,
            gender,
            created,
            edited
          ]);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'People name=$name updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'People name=$name did not update');
      }
      return 1;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'People Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<People>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<People> peoples) async {
    final results = await _mnPeople.rawInsertAll(
        'INSERT OR REPLACE INTO people (name, height, mass, hairColor, skinColor, eyeColor, birthYear, gender, created, edited)  VALUES (?,?,?,?,?,?,?,?,?,?)',
        peoples);
    return results;
  }

  /// Deletes People

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted

  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete People invoked (name=$name)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnPeople
          .delete(QueryParams(whereString: 'name=?', whereArguments: [name]));
    } else {
      return _mnPeople.updateBatch(
          QueryParams(whereString: 'name=?', whereArguments: [name]),
          {'isDeleted': 1});
    }
  }

  PeopleFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return PeopleFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  PeopleFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return PeopleFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion people

// region PeopleField
class PeopleField extends SearchCriteria {
  PeopleField(this.peopleFB);
  // { param = DbParameter(); }
  DbParameter param = DbParameter();
  String _waitingNot = '';
  PeopleFilterBuilder peopleFB;

  PeopleField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  PeopleFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    peopleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, peopleFB.parameters, param, SqlSyntax.EQuals,
            peopleFB._addedBlocks)
        : setCriteria(pValue, peopleFB.parameters, param, SqlSyntax.NotEQuals,
            peopleFB._addedBlocks);
    _waitingNot = '';
    peopleFB._addedBlocks.needEndBlock![peopleFB._blockIndex] =
        peopleFB._addedBlocks.retVal;
    return peopleFB;
  }

  PeopleFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    peopleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, peopleFB.parameters, param,
            SqlSyntax.EQualsOrNull, peopleFB._addedBlocks)
        : setCriteria(pValue, peopleFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, peopleFB._addedBlocks);
    _waitingNot = '';
    peopleFB._addedBlocks.needEndBlock![peopleFB._blockIndex] =
        peopleFB._addedBlocks.retVal;
    return peopleFB;
  }

  PeopleFilterBuilder isNull() {
    peopleFB._addedBlocks = setCriteria(
        0,
        peopleFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        peopleFB._addedBlocks);
    _waitingNot = '';
    peopleFB._addedBlocks.needEndBlock![peopleFB._blockIndex] =
        peopleFB._addedBlocks.retVal;
    return peopleFB;
  }

  PeopleFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      peopleFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          peopleFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          peopleFB._addedBlocks);
      _waitingNot = '';
      peopleFB._addedBlocks.needEndBlock![peopleFB._blockIndex] =
          peopleFB._addedBlocks.retVal;
    }
    return peopleFB;
  }

  PeopleFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      peopleFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          peopleFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          peopleFB._addedBlocks);
      _waitingNot = '';
      peopleFB._addedBlocks.needEndBlock![peopleFB._blockIndex] =
          peopleFB._addedBlocks.retVal;
      peopleFB._addedBlocks.needEndBlock![peopleFB._blockIndex] =
          peopleFB._addedBlocks.retVal;
    }
    return peopleFB;
  }

  PeopleFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      peopleFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          peopleFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          peopleFB._addedBlocks);
      _waitingNot = '';
      peopleFB._addedBlocks.needEndBlock![peopleFB._blockIndex] =
          peopleFB._addedBlocks.retVal;
    }
    return peopleFB;
  }

  PeopleFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      peopleFB._addedBlocks = setCriteria(
          pFirst,
          peopleFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          peopleFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        peopleFB._addedBlocks = setCriteria(pFirst, peopleFB.parameters, param,
            SqlSyntax.LessThan, peopleFB._addedBlocks);
      } else {
        peopleFB._addedBlocks = setCriteria(pFirst, peopleFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, peopleFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        peopleFB._addedBlocks = setCriteria(pLast, peopleFB.parameters, param,
            SqlSyntax.GreaterThan, peopleFB._addedBlocks);
      } else {
        peopleFB._addedBlocks = setCriteria(pLast, peopleFB.parameters, param,
            SqlSyntax.LessThanOrEquals, peopleFB._addedBlocks);
      }
    }
    _waitingNot = '';
    peopleFB._addedBlocks.needEndBlock![peopleFB._blockIndex] =
        peopleFB._addedBlocks.retVal;
    return peopleFB;
  }

  PeopleFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    peopleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, peopleFB.parameters, param, SqlSyntax.GreaterThan,
            peopleFB._addedBlocks)
        : setCriteria(pValue, peopleFB.parameters, param,
            SqlSyntax.LessThanOrEquals, peopleFB._addedBlocks);
    _waitingNot = '';
    peopleFB._addedBlocks.needEndBlock![peopleFB._blockIndex] =
        peopleFB._addedBlocks.retVal;
    return peopleFB;
  }

  PeopleFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    peopleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, peopleFB.parameters, param, SqlSyntax.LessThan,
            peopleFB._addedBlocks)
        : setCriteria(pValue, peopleFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, peopleFB._addedBlocks);
    _waitingNot = '';
    peopleFB._addedBlocks.needEndBlock![peopleFB._blockIndex] =
        peopleFB._addedBlocks.retVal;
    return peopleFB;
  }

  PeopleFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    peopleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, peopleFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, peopleFB._addedBlocks)
        : setCriteria(pValue, peopleFB.parameters, param, SqlSyntax.LessThan,
            peopleFB._addedBlocks);
    _waitingNot = '';
    peopleFB._addedBlocks.needEndBlock![peopleFB._blockIndex] =
        peopleFB._addedBlocks.retVal;
    return peopleFB;
  }

  PeopleFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    peopleFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, peopleFB.parameters, param,
            SqlSyntax.LessThanOrEquals, peopleFB._addedBlocks)
        : setCriteria(pValue, peopleFB.parameters, param, SqlSyntax.GreaterThan,
            peopleFB._addedBlocks);
    _waitingNot = '';
    peopleFB._addedBlocks.needEndBlock![peopleFB._blockIndex] =
        peopleFB._addedBlocks.retVal;
    return peopleFB;
  }

  PeopleFilterBuilder inValues(dynamic pValue) {
    peopleFB._addedBlocks = setCriteria(
        pValue,
        peopleFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        peopleFB._addedBlocks);
    _waitingNot = '';
    peopleFB._addedBlocks.needEndBlock![peopleFB._blockIndex] =
        peopleFB._addedBlocks.retVal;
    return peopleFB;
  }
}
// endregion PeopleField

// region PeopleFilterBuilder
class PeopleFilterBuilder extends SearchCriteria {
  PeopleFilterBuilder(People obj) {
    whereString = '';
    groupByList = <String>[];
    _addedBlocks.needEndBlock!.add(false);
    _addedBlocks.waitingStartBlock!.add(false);
    _obj = obj;
  }
  AddedBlocks _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
  int _blockIndex = 0;
  List<DbParameter> parameters = <DbParameter>[];
  List<String> orderByList = <String>[];
  People? _obj;
  QueryParams qparams = QueryParams();
  int _pagesize = 0;
  int _page = 0;

  /// put the sql keyword 'AND'
  PeopleFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  PeopleFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  PeopleFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock!.add(true);
    _addedBlocks.needEndBlock!.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock![_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  PeopleFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock![_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  PeopleFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  PeopleFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  PeopleFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock![_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock!.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock!.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  PeopleFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  PeopleFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  PeopleFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  PeopleFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String? s in argFields as List<String?>) {
          if (s!.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  PeopleField setField(PeopleField? field, String colName, DbType dbtype) {
    return PeopleField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock![_blockIndex]);
  }

  PeopleField? _name;
  PeopleField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  PeopleField? _height;
  PeopleField get height {
    return _height = setField(_height, 'height', DbType.text);
  }

  PeopleField? _mass;
  PeopleField get mass {
    return _mass = setField(_mass, 'mass', DbType.text);
  }

  PeopleField? _hairColor;
  PeopleField get hairColor {
    return _hairColor = setField(_hairColor, 'hairColor', DbType.text);
  }

  PeopleField? _skinColor;
  PeopleField get skinColor {
    return _skinColor = setField(_skinColor, 'skinColor', DbType.text);
  }

  PeopleField? _eyeColor;
  PeopleField get eyeColor {
    return _eyeColor = setField(_eyeColor, 'eyeColor', DbType.text);
  }

  PeopleField? _birthYear;
  PeopleField get birthYear {
    return _birthYear = setField(_birthYear, 'birthYear', DbType.text);
  }

  PeopleField? _gender;
  PeopleField get gender {
    return _gender = setField(_gender, 'gender', DbType.text);
  }

  PeopleField? _created;
  PeopleField get created {
    return _created = setField(_created, 'created', DbType.text);
  }

  PeopleField? _edited;
  PeopleField get edited {
    return _edited = setField(_edited, 'edited', DbType.text);
  }

  bool _getIsDeleted = false;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text || param.value[0] is String
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName!)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName!);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (People._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<People> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult(success: false);

    if (People._softDeleteActivated && !hardDelete) {
      r = await _obj!._mnPeople.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj!._mnPeople.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'name IN (SELECT name from people ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj!._mnPeople.updateBatch(qparams, values);
  }

  /// This method always returns People Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<People>
  Future<People?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj!._mnPeople.toList(qparams);
    final data = await objFuture;
    People? obj;
    if (data.isNotEmpty) {
      obj = People.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [People]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c)? peopleCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final peoplesFuture = await _obj!._mnPeople.toList(qparams);
    final int count = peoplesFuture[0]['CNT'] as int;
    if (peopleCount != null) {
      peopleCount(count);
    }
    return count;
  }

  /// This method returns List<People> [People]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<People>
  Future<List<People>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<People> peoplesData = await People.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return peoplesData;
  }

  /// This method returns Json String [People]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [People]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [People]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj!._mnPeople.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [People]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `name` FROM people WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<String>.
  /// <returns>List<String>
  Future<List<String>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<String> nameData = <String>[];
    qparams.selectColumns = ['name'];
    final nameFuture = await _obj!._mnPeople.toList(qparams);

    final int count = nameFuture.length;
    for (int i = 0; i < count; i++) {
      nameData.add(nameFuture[i]['name'] as String);
    }
    return nameData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [People]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj!._mnPeople.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await People.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    _buildParameters();

    final objectFuture = _obj!._mnPeople.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion PeopleFilterBuilder

// region PeopleFields
class PeopleFields {
  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fHeight;
  static TableField get height {
    return _fHeight =
        _fHeight ?? SqlSyntax.setField(_fHeight, 'height', DbType.text);
  }

  static TableField? _fMass;
  static TableField get mass {
    return _fMass = _fMass ?? SqlSyntax.setField(_fMass, 'mass', DbType.text);
  }

  static TableField? _fHairColor;
  static TableField get hairColor {
    return _fHairColor = _fHairColor ??
        SqlSyntax.setField(_fHairColor, 'hairColor', DbType.text);
  }

  static TableField? _fSkinColor;
  static TableField get skinColor {
    return _fSkinColor = _fSkinColor ??
        SqlSyntax.setField(_fSkinColor, 'skinColor', DbType.text);
  }

  static TableField? _fEyeColor;
  static TableField get eyeColor {
    return _fEyeColor =
        _fEyeColor ?? SqlSyntax.setField(_fEyeColor, 'eyeColor', DbType.text);
  }

  static TableField? _fBirthYear;
  static TableField get birthYear {
    return _fBirthYear = _fBirthYear ??
        SqlSyntax.setField(_fBirthYear, 'birthYear', DbType.text);
  }

  static TableField? _fGender;
  static TableField get gender {
    return _fGender =
        _fGender ?? SqlSyntax.setField(_fGender, 'gender', DbType.text);
  }

  static TableField? _fCreated;
  static TableField get created {
    return _fCreated =
        _fCreated ?? SqlSyntax.setField(_fCreated, 'created', DbType.text);
  }

  static TableField? _fEdited;
  static TableField get edited {
    return _fEdited =
        _fEdited ?? SqlSyntax.setField(_fEdited, 'edited', DbType.text);
  }
}
// endregion PeopleFields

//region PeopleManager
class PeopleManager extends SqfEntityProvider {
  PeopleManager()
      : super(StarwarsDBModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'people';
  static final List<String> _primaryKeyList = ['name'];
  static final String _whereStr = 'name=?';
}

//endregion PeopleManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await StarwarsDBModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await StarwarsDBModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await StarwarsDBModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class StarwarsDBModelSequenceManager extends SqfEntityProvider {
  StarwarsDBModelSequenceManager() : super(StarwarsDBModel());
}
// END OF ENTITIES
